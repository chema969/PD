;; 
;; Nombre: crear-canción
;; Objetivo: Crea una lista de asociación que representa a una canción
;; Parámetro:
;;         título: Título de la canción
;;         cantante: Cantante de la canción
;;         año: Año de la canción
;; Resultado: 
;;         Lista de asociación que representa una canción
;; Funciones a las que llama: ninguna
;;
(define(crear-canción título cantante año)
 ;Crea la lista de asociacion que definirá una canción
(list (list 'título   título)
      (list' cantante cantante)
      (list' año año))
  )

;; 
;; Nombre: ver-título
;; Objetivo: Retorna el titulo de la canción
;;
(define(ver-título cancion)
  (cadr(assoc' título cancion)))

;; 
;; Nombre: ver-cantante
;; Objetivo: Retorna el cantante de la canción
;;
(define(ver-cantante cancion)
  (cadr(assoc' cantante cancion)))

;; 
;; Nombre: ver-año
;; Objetivo: Retorna el año de la canción
;;
(define(ver-año cancion)
  (cadr(assoc' año cancion)))

;; 
;; Nombre: cambiar-título!
;; Objetivo: Cambia el titulo de la canción
;;
(define(cambiar-título! cancion nuevo)
  (set-cdr! (assoc 'título cancion) (list nuevo)))

;; 
;; Nombre: cambiar-cantante!
;; Objetivo: Cambia el cantante de la canción
;;
(define(cambiar-cantante! cancion nuevo)
  (set-cdr! (assoc 'cantante cancion) (list nuevo)))

;; 
;; Nombre: cambiar-año!
;; Objetivo: Cambia el año de la canción
;;
(define(cambiar-año! cancion nuevo)
  (set-cdr! (assoc 'año cancion) (list nuevo)))


;; 
;; Nombre: consultar-datos-canción
;; Objetivo: Función de consulta que imprime los datos de una canción
;;
(define(consultar-datos-canción cancion)
  ;Datos del título de la canción
  (display "Título: ")
  (display(ver-título cancion))
  (newline)
  ;Datos sobre el cantante de la canción
  (display "Cantante: ")
  (display(ver-cantante cancion))
  (newline)
  ;Datos del año de la canción
  (display"Año: ")
  (display(ver-año cancion))
  (newline)
  )



;; 
;; Nombre: crear-discoteca
;; Objetivo: Función que crea una discoteca vacía
;;
(define(crear-discoteca)
  ;Devuelve una lista vacia
  (list))


;; 
;; Nombre: discoteca-vacía?
;; Objetivo: Retorna true si una discoteca está vacia y false si no
;; Parámetro:
;;         discoteca: Discoteca a consultar
;;
(define (discoteca-vacía? discoteca)
  (if (null? discoteca)
      #t
      #f
      )
  )

;;
;; Nombre: insertar-canción!
;; Objetivo: Inserta de forma ordenada una cancion a la discoteca
;; Parámetro:
;;         discoteca: Discoteca a la que añadir una cancion
;;         canción: Canción que se añade
;; Resultado: 
;;         La discoteca más la canción añadida en su lugar
;; Funciones a las que llama:
;;         ordenada: Función recursiva que permite insertar la canción de manera ordenada
;;
(define (insertar-canción! discoteca canción)
  ;Funcion auxiliar
  (define (ordenada discoteca canción discoyavista)
    (if (discoteca-vacía? discoteca)
        ;Si la discoteca está vacia, significa que hemos llegado al ultimo elemento, por lo que se añade la canción al final
        (append discoyavista (list canción))
        (if (string>? (ver-título (car discoteca)) (ver-título canción))
            ;Si está en su lugar,lo añadimos
            (append discoyavista (list canción) discoteca )
            ;Si no, llamamos a la función recursivamente y añadimos la canción ya vista a discoyavista
            (ordenada (cdr discoteca) canción (append discoyavista (list (car discoteca))))
            )
        )
    )
  ;Fin de las funciones auxiliares
  (if (discoteca-vacía? discoteca)
      ;Si la lista esta vacia, esta se transforma en una lista con la canción
      (list canción)
      ;Si no, se llama a la función auxiliar
      (ordenada discoteca canción '())
      )
  )

;;
;; Nombre: existe-canción?
;; Objetivo: Comprueba si una canción está en una discoteca
;; Parámetro:
;;         discoteca: Discoteca en la que se quiere comprobar si existe esta canción
;;         canción: Canción que se quiere provar
;; Resultado: 
;;        #t si está, #f si no
;; Funciones a las que llama: ninguna
;;
(define (existe-canción? discoteca canción)
  (if (discoteca-vacía? discoteca)
      ;Si la discoteca está vacia, retornamos false
      #f
      (if (equal? (car discoteca) canción)
          ;Si es la canción que buscamos
          #t
          (existe-canción? (cdr discoteca) canción)
          )
      
      )
  )

;;
;; Nombre: existe-canción-título?
;; Objetivo: Comprueba si una canción está en una discoteca tiene este título
;; Parámetro:
;;         discoteca: Discoteca en la que se quiere comprobar si existe esta canción
;;         título: Título que se quiere buscar
;; Resultado: 
;;        #t si está, #f si no
;; Funciones a las que llama: ninguna
;;
(define (existe-canción-título? discoteca título)
  (if (discoteca-vacía? discoteca)
      ;Si la discoteca está vacía
      #f
      (if (equal? (ver-título (car discoteca)) título)
          ;Si el título es el mismo que buscamos
          #t
          ;Si no, llamamos recursivamente a la función
          (existe-canción-título? (cdr discoteca) título)
          )
      
      )
  )

;;
;; Nombre: existe-canción-cantante?
;; Objetivo: Comprueba si una canción está en una discoteca tiene este cantante
;; Parámetro:
;;         discoteca: Discoteca en la que se quiere comprobar si existe esta canción
;;         cantante: Cantante que se quiere buscar
;; Resultado: 
;;        #t si está, #f si no
;; Funciones a las que llama: ninguna
;;
(define (existe-canción-cantante? discoteca cantante)
  (if (discoteca-vacía? discoteca)
      ;Si la discoteca está vacía
      #f
      (if (equal? (ver-cantante (car discoteca)) cantante)
          ;Si es el cantante que se busca
          #t
          ;Si no, se llama recursivamente
          (existe-canción-cantante? (cdr discoteca) cantante)
          )      
      )
  )

;;
;; Nombre: existe-canción-año?
;; Objetivo: Comprueba si una canción está en una discoteca es de ese año
;; Parámetro:
;;         discoteca: Discoteca en la que se quiere comprobar si existe esta canción
;;         año: año que se quiere buscar
;; Resultado: 
;;        #t si está, #f si no
;; Funciones a las que llama: ninguna
;;
(define (existe-canción-año? discoteca año)
  (if (discoteca-vacía? discoteca)
      ;Si la discoteca está vacía      
      #f
      (if (equal? (ver-año (car discoteca)) año)
          ;Si es el año que se busca
          #t
          (existe-canción-año? (cdr discoteca) año)
          )      
      )
  )

;;
;; Nombre: consultar-canción-título
;; Objetivo: Muestra los datos de una canción en una discoteca que tenga el titulo 
;; Parámetro:
;;         discoteca: Discoteca en la que se quiere comprobar si existe esta canción
;;         título: título que se quiere buscar
;; Resultado: 
;;        Se muestran por pantalla los datos de esta cancin
;; Funciones a las que llama: ninguna
;;
(define (consultar-canción-título discoteca título)
  (if (discoteca-vacía? discoteca)
      (begin (display "La canción no existe") (newline))
      (if (equal? (ver-título (car discoteca)) título)
          (consultar-datos-canción (car discoteca))
          (consultar-canción-título (cdr discoteca) título)
          )      
      )
  )


;;
;; Nombre: consultar-canción-cantante
;; Objetivo: Muestra los datos de una canción en una discoteca que sea de este cantante
;; Parámetro:
;;         discoteca: Discoteca en la que se quiere comprobar si existe esta canción
;;         cantante: Cantante que se quiere buscar
;; Resultado: 
;;        Se muestran por pantalla los datos de esta cancin
;; Funciones a las que llama: ninguna
;;
(define (consultar-canción-cantante discoteca cantante)
  ;Función auxiliar para poder imprimir todas las canciones de ese año
  ;sin tener que llamar varias veces a existe-cancion-cantante?, ya que se
  ;sobreentiende que puede haber más de una canción del mismo cantante
  (define (aux discoteca cantante)
    (if (not (discoteca-vacía? discoteca))
        ;Si no es una discoteca vacia
        (if (equal? (ver-cantante (car discoteca)) cantante)
            ;Si es de este cantante se muestra la canción y se llama recursivamente
            (begin (consultar-datos-canción (car discoteca))(aux (cdr discoteca) cantante))
            ;Se llama recursivamente
            (aux (cdr discoteca) cantante)
            )      
        )
    )
  ;Pregunto si existe canciones de ese año y si existen, llamo a la función auxiliar
  (if (existe-canción-cantante? discoteca cantante)
      (aux discoteca cantante)
      )
  )

;;
;; Nombre: consultar-canción-año
;; Objetivo: Muestra los datos de una canción en una discoteca que sea de ese año
;; Parámetro:
;;         discoteca: Discoteca en la que se quiere mostrar la canción
;;         año: año que se quiere buscar
;; Resultado: 
;;        Se muestran por pantalla los datos de las canciones
;; Funciones a las que llama: ninguna
;;
(define (consultar-canción-año discoteca año)
  ;Función auxiliar para poder imprimir todas las canciones de ese año
  ;sin tener que llamar varias veces a existe-cancion-año?, ya que se
  ;sobreentiende que puede haber más de una cancion el mismo año
  (define (aux discoteca año)
    (if (not (discoteca-vacía? discoteca))
        ;Si no es una discoteca vacia
        (if (equal? (ver-año (car discoteca)) año)
            ;Si es del mismo año, se muestra y se llama recursivamente a la función
            (begin (consultar-datos-canción (car discoteca))(aux (cdr discoteca) año))
            ;Si no, llamas recursivamente
            (aux (cdr discoteca) año)
            )      
        )
    )
  ;Pregunto si existe canciones de ese año y si existen, llamo a la función auxiliar
  (if (existe-canción-año? discoteca año)
      (aux discoteca año)
      )
  )


;;
;; Nombre: borrar-canción!
;; Objetivo: Borra una canción de una discoteca
;; Parámetro:
;;         discoteca: Discoteca de la que se quiere borrar una cancion
;;         canción: Canción que se quiere borrar
;; Resultado: 
;;        Se elimina la cancion si existe
;; Funciones a las que llama: aux:Funcion recursiva
;;
(define (borrar-canción! discoteca canción)
  ;Función auxiliar
  (define (aux discoteca canción discofinal)
    (if (discoteca-vacía? discoteca)
        ;Si es una discoteca vacía
        discofinal
        (if (equal? (car discoteca) canción)
            ;Si es igual la canción a la que se que busca
            (aux (cdr discoteca) canción discofinal)
            ;Si no, se llama recursivamente
            (aux (cdr discoteca) canción (insertar-canción! discofinal (car discoteca)))
            )      
        )
    )
  ;Fin de las funciones auxiliares
  (if(existe-canción? discoteca canción)
     ;Si existe, llamamos a la funcion auxiliar
     (aux discoteca canción (crear-discoteca))
     (begin (display "La canción no existe") (newline))
     )
  )

;;
;; Nombre: borrar-canción-título!
;; Objetivo: Borra una canción de una discoteca cuyo título sea este
;; Parámetro:
;;         discoteca: Discoteca de la que se quiere borrar una cancion
;;         título: Título de la canción que se quiere borrar
;; Resultado: 
;;        Se elimina la cancion si existe
;; Funciones a las que llama: aux:Funcion recursiva
;;
(define (borrar-canción-título! discoteca título)
  ;Función auxiliar
  (define (aux discoteca título discofinal)
    (if (discoteca-vacía? discoteca)
        ;Si es una discoteca vacía
        discofinal
        (if (equal? (ver-título (car discoteca)) título)
            ;Si el título es el que se está buscando
            (aux (cdr discoteca) título discofinal)
            ;Si no es la que se está buscando
            (aux (cdr discoteca) título (insertar-canción! discofinal (car discoteca)))
            )      
        )
    )
  ;Fin de la función auxiliar
  (if(existe-canción-título? discoteca título)
     (aux discoteca título (crear-discoteca))
     (begin (display "La canción no existe") (newline))
     )
  )



;;
;; Nombre: borrar-canción-cantante!
;; Objetivo: Borra una canción de una discoteca cuyo cantante sea este
;; Parámetro:
;;         discoteca: Discoteca de la que se quiere borrar una cancion
;;         Cantante: Cantante de cuya canciones se quieren borrar
;; Resultado: 
;;        Se elimina las canciones si existe
;; Funciones a las que llama: aux:Funcion recursiva
;;
(define (borrar-canción-cantante! discoteca cantante)
  ;Función auxiliar  
  (define (aux discoteca cantante discofinal)
    (if (discoteca-vacía? discoteca)
        ;Si es una discoteca vacia
        discofinal
        (if (equal? (ver-cantante (car discoteca)) cantante)
            ;SI es del cantante, no se añade
            (aux (cdr discoteca) cantante discofinal)
            ;Si no, se llama recursivamente
            (aux (cdr discoteca) cantante (insertar-canción! discofinal (car discoteca)))
            )      
        )
    )
  ;Fin de la función auxiliar
  (if(existe-canción-cantante? discoteca título)
     
     (aux discoteca cantante (crear-discoteca))
     (begin (display "La canción no existe") (newline))
     )
  )

;;
;; Nombre: modificar-canción-título!
;; Objetivo: Cambia el titulo de una canción
;; Parámetro:
;;         discoteca: Discoteca de la que se quiere modificar una cancion
;;         título: Título de la canción que se quiere modificar
;;         nuevo-título: Nuevo título de la canción
;; Resultado: 
;;        Se modifica la cancion si existe
;; Funciones a las que llama: ninguna
;;
(define (modificar-canción-título! discoteca título nuevo-título)
  (define (aux discoteca título nuevo-título toda)
    (if (discoteca-vacía? discoteca)
        ;Si hemos llegado al final o la discoteca está vacía
        (begin (display "La canción no existe") (newline))
        (if (equal? (ver-título (car discoteca)) título)
            ;Si el titulo es igual, lo cambiamos y lo volvemos a introducir (para mantener el orden)
            (let
                (
                 (cancionaux (car discoteca))
                 )
              (begin
                (set! toda (borrar-canción-título! toda título))
                (cambiar-título! cancionaux nuevo-título)
                (set! toda (insertar-canción! toda cancionaux))
                toda)
              )
            (aux (cdr discoteca) título nuevo-título toda)
            )
        )
    )
  (aux discoteca título nuevo-título discoteca)
  )

;;
;; Nombre: modificar-canción-cantante!
;; Objetivo: Cambia el cantante de una canción
;; Parámetro:
;;         discoteca: Discoteca de la que se quiere modificar una cancion
;;         título: Título de la canción que se quiere modificar
;;         cantante: Nuevo cantante de la canción
;; Resultado: 
;;        Se modifica el cantante de la cancion si existe
;; Funciones a las que llama: ninguna
;;
(define (modificar-canción-cantante! discoteca título cantante)
  (if (discoteca-vacía? discoteca)
       ;Si hemos llegado al final o la discoteca está vacía
      (begin (display "La canción no existe") (newline))
      (if (equal? (ver-título (car discoteca)) título)
          ;Si el titulo es igual, cambiamos al cantante
          (cambiar-cantante! (car discoteca) cantante)
          ;Si no llamamos recusivamente
          (modificar-canción-cantante! (cdr discoteca) título cantante)
          )
      )
  )

;;
;; Nombre: modificar-canción-año!
;; Objetivo: Cambia el año de una canción
;; Parámetro:
;;         discoteca: Discoteca de la que se quiere modificar una cancion
;;         título: Título de la canción que se quiere modificar
;;         año: Nuevo año de la canción
;; Resultado: 
;;        Se modifica el año de la cancion si existe
;; Funciones a las que llama: ninguna
;;
(define (modificar-canción-año! discoteca título año)
  (if (discoteca-vacía? discoteca)
             ;Si hemos llegado al final o la discoteca está vacía

      (begin (display "La canción no existe") (newline))
      (if (equal? (ver-título (car discoteca)) título)
          ;Si encontramos la canción, cambiamos el año
          (cambiar-año! (car discoteca) año)
          ;Si no, se llama recursivamente
          (modificar-canción-año! (cdr discoteca) título año)
          )
      )
  )

;;
;; Nombre: consultar-canciones
;; Objetivo: Funcion de consulta de la discoteca
;;
(define (consultar-canciones discoteca)
  (if (discoteca-vacía? discoteca)
      (newline)
      (begin (consultar-datos-canción (car discoteca)) (consultar-canciones (cdr discoteca)))
      )
  )


;;
;; Nombre: cargar-canciones
;; Objetivo: Carga las canciones de un fichero
;; Parámetro:
;;         fichero: Fichero del que se quiere leer
;; Resultado: 
;;        Una discoteca con las canciones del fichero
;; Funciones a las que llama: ninguna
;;
(define (cargar-canciones fichero)
  (if (string? fichero)
      (let
          (
           ;Guardamos el puerto de entrada
           (puerto (open-input-file fichero))
           )
        ;Cuerpo del let
        (if (input-port? puerto)
            ;Si es un puerto de entrada
            (do
                (
                 ;Creamos la discoteca y en cada iteración metemos una cancion
                 (disco (crear-discoteca) (insertar-canción! disco
                                                                (crear-canción título  cantante año)                                                                                                             
                                                               )
                        )
                 ;Leemos los distintos parametros de la canción
                 (título (read puerto)  (read puerto))
                 (cantante (read puerto) (read puerto))
                 (año (read puerto)  (read puerto))
                 )
              ;Si hemos llegado a la última cancion, salimos devolviendo la discoteca
              ((eof-object? título) disco)
              )
            (begin (display "No es un puerto") (newline))
            )
        )
      ;Si no es un string
      (display "Debes introducir un string")
      )
  )

;;
;; Nombre: grabar-canciones
;; Objetivo: Guarda las canciones de una discoteca en un fichero 
;; Parámetro:
;;         discoteca: Discoteca que se quiere grabar
;;         fichero: Fichero en el que se quiere grabar
;; Resultado: 
;;        Un fichero con los datos de la discoteca
;; Funciones a las que llama:
;;        poner-comillas:Pone comillas a las cadenas
;;        aux: Crea la discoteca
;;
(define (grabar-canciones fichero discoteca)
  ;Primera función auxiliar
  (define (poner-comillas texto)
    (string-append (string #\") texto (string #\"))
    )
  ;Segunda función auxiliar
  (define (aux puerto discoteca)
    (if (discoteca-vacía? discoteca)
        ;Si es una discoteca vacia, cerramos el puerto
        (close-output-port puerto)
        ;Grabamos en el fichero
        (begin
          (display (poner-comillas (ver-título (car discoteca))) puerto)
          (display " " puerto)
          (display (poner-comillas (ver-cantante (car discoteca))) puerto)
          (display" " puerto)
          (display(ver-año (car discoteca)) puerto)
          (newline puerto)
          (aux puerto (cdr discoteca)))
        )
    )
  (if (string? fichero)
      (let
          (
           ;Puerto de salida
           (puerto (open-output-file fichero))
           )
        ;Cuerpo del let
        (if (output-port? puerto)
            ;Si es un puerto de salida
            (aux puerto discoteca)
            (begin (display "No es un puerto") (newline))
            )
        )
      (display "Debes introducir un string")
      )
  )

(define (programa)
  (define (pedir-opcion)
    (newline)
    (display "elige una opción")
    (newline)
    (display "1 --> Crear nueva discoteca.")
    (newline)
    (display "2 --> Comprobar si una discoteca está vacía")
    (newline)
    (display "3 --> Insertar una canción.")
    (newline)
    (display "4 --> Consultar una canción.")
    (newline)
    (display "5 --> Modificar una canción.")
    (newline)
    (display "6 --> Borrar una canción.")
    (newline)
    (display "7 --> Borrar todas las canciones de un cantante.")
    (newline)
    (display "8 --> Consultar las canciones.")
    (newline)
    (display "9 --> Consultar las canciones de un cantante.")
    (newline)
    (display "10 --> Consultar las canciones de un año.")
    (newline)
    (display "11 --> Cargar las canciones desde un fichero.")
    (newline)
    (display "12 --> Grabar las canciones en un fichero.")
    (newline)    
    (display "0 --> salir")
    (newline)
    (newline)
    (read)
    )
   (do
      (
       (opcion (pedir-opcion) (pedir-opcion))
       (discoteca '())
       )
     ; condición de salida
     ( (= opcion 0) (display "Fin del programa") )
     ; cuerpo del bucle do
     (cond
       ((= opcion 1)
        (display "Crear una discoteca")
        (newline)
        (set! discoteca (crear-discoteca))
        )
       ((= opcion 2)
        (display "¿Está vacía la discoteca?")
        (newline)
        (if (discoteca-vacía? discoteca)
            (begin (display "Si") (newline))
            (begin (display "No") (newline))
            )
        (newline)
        )
       ((= opcion 3)
        (display "Insertar una canción")
        (newline)
        (let
            (
             (título (begin(display "Inserte el título de la canción(entre comillas):")(read)))
             (cantante (begin(display "Inserte el cantante(entre comillas):")(read)))
             (año (begin(display "Inserte el año de la canción:")(read)))
             )
          (set! discoteca (insertar-canción!  discoteca (crear-canción título cantante año)))
          )
        )
        ((= opcion 4)
         (display "Consultar una canción")
         (newline)
         (let
            (
             (título (begin(display "Inserte el título de la canción(entre comillas):")(read)))
             )
           (consultar-canción-título discoteca título)
           )
        )
       ((= opcion 5)
        (display "Modificar una canción")
        (newline)
        (let
            (
             (título (begin(display "Inserte el título de la canción que quieres cambiar(entre comillas):")(read)))
             (nuevo_titulo (begin(display "Inserte el nuevo título(entre comillas), 0 si no quieres cambiar este dato:")(read)))             
             (cantante (begin(display "Inserte el nuevo cantante(entre comillas), 0 si no quieres cambiar este dato:")(read)))
             (año (begin(display "Inserte el año de la canción, 0 si no quieres cambiar este dato:")(read)))
             )
          (begin
            (if (not (= cantante 0))
                (modificar-canción-cantante! discoteca título cantante)
                )
            (if (not (= año 0))
                (modificar-canción-año! discoteca título año)
                )
            (if (not (= nuevo_titulo 0))
                (set! discoteca (modificar-canción-título! discoteca título nuevo_titulo))
                )        
            )    
          )
      )
       ((= opcion 6)
        (display "Borrar una canción")
        (newline)
        (let
            (
             (título (begin(display "Inserte el título de la canción(entre comillas):")(read)))
             )
           (set! discoteca (borrar-canción-título! discoteca título))
           )
        )
       ((= opcion 7)
        (display "Borrar todas las canciones de un cantante")
        (newline)
        (let
            (
             (cantante (begin(display "Inserte el cantante(entre comillas):")(read)))
             )
          (set! discoteca (borrar-canción-cantante! discoteca cantante))
          )
        )
       ((= opcion 8)
        (display "Consultar las canciones")
        (newline)
        (newline)
        (consultar-canciones discoteca)
        )
       ((= opcion 9)
        (display "Consultar las canciones de un cantante")
        (newline)
        (let
            (
             (cantante (begin(display "Inserte el cantante(entre comillas):")(read)))
             )
          (newline)
          (consultar-canción-cantante discoteca cantante)
          )
        )
       ((= opcion 10)
        (display "Consultar las canciones de un año")
        (newline)
        (let
            (
             (año (begin(display "Inserte el año:")(read)))
             )
          (newline)
          (consultar-canción-año discoteca año)
          )
        )
       ((= opcion 11)
        (display "Cargar las canciones desde un fichero")
        (let
            (
             (fichero (begin(display "Introduce el fichero(entre comillas):")(read)))
             )
          (set! discoteca (cargar-canciones fichero))
          )
        )
       ((= opcion 12)
        (display "Grabar las canciones en un fichero")
        (let
            (
             (fichero (begin(display "Introduce el fichero(entre comillas):")(read)))
             )
          (grabar-canciones fichero discoteca)
          )
        )                                                
       (else
        (display "Opción errónea")
        (newline)
        )
       )
     (newline)
     )
  )







